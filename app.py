from typing import Optional

from sqlmodel import SQLModel, Field, create_engine

class Hero(SQLModel, table=True):
    # id will be generated by the database, not by our code.
    # value of id will be `None` until we save it in the database.
    # if we don't set the default value,
    # it will always require passing that `None` value while doing data validation.
    id: Optional[int] = Field(default=None, primary_key=True)

    name: str
    secret_name: str

    # age is not required when validating data and it has a default value of None.
    # translates to `NULL` in the database.
    age: Optional[int] = None


sqlite_file_name = "database.db"
sqlite_url = f"sqlite:///{sqlite_file_name}"

# have a single engine object for the entire application and reuse it.
# echo=True prints all the SQL statements that are executed.
engine = create_engine(sqlite_url, echo=True)

# if this was not in a separate function,
# it would create database and tables every time we import this module as a side effect
def create_db_and_tables():
    # create the database and all the tables registered in the MetaData object
    # has to be called after the code that creates new model classes inherting from SQLModel
    SQLModel.metadata.create_all(engine)


# purpose of __name__ == "__main__"
# is to have some code that is executed when called with `python app.py`
# but no called when another file imports it like `from app import something`
if __name__ == "__main__":
    create_db_and_tables()
