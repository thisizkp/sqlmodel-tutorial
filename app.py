from typing import Optional

from sqlmodel import SQLModel, Field, Session, create_engine

class Hero(SQLModel, table=True):
    # id will be generated by the database, not by our code.
    # value of id will be `None` until we save it in the database.
    # if we don't set the default value,
    # it will always require passing that `None` value while doing data validation.
    id: Optional[int] = Field(default=None, primary_key=True)

    name: str
    secret_name: str

    # age is not required when validating data and it has a default value of None.
    # translates to `NULL` in the database.
    age: Optional[int] = None


sqlite_file_name = "database.db"
sqlite_url = f"sqlite:///{sqlite_file_name}"

# have a single engine object for the entire application and reuse it.
# echo=True prints all the SQL statements that are executed.
# engine is responsible for communicating with the database, handling the connections..etc
engine = create_engine(sqlite_url, echo=True)


# if this was not in a separate function,
# it would create database and tables every time we import this module as a side effect
def create_db_and_tables():
    # create the database and all the tables registered in the MetaData object
    # has to be called after the code that creates new model classes inherting from SQLModel
    SQLModel.metadata.create_all(engine)


def create_heroes():
    hero_1 = Hero(name="Deadpond", secret_name="Dive Wilson")
    hero_2 = Hero(name="Spider-Boy", secret_name="Pedro Parqueador")
    hero_3 = Hero(name="Rusty-Man", secret_name="Tommy Sharp", age=48)

    # create a new session for each group of operations with the database that belong together
    # a single session per request
    # will create a new transaction and execute all the SQL code in that transaction
    # ensures that data is saved in a single batch. either all succeed or all fail
    with Session(engine) as session:
        # holding in memory all the objects that should be saved in the database later
        session.add(hero_1)
        session.add(hero_2)
        session.add(hero_3)

        # on commit, session will use the engine underneath to save all the data
        # by sending the appropriate SQL to the database
        session.commit()

    # once done with the session, close it to release the resources and finish any cleanup
    # used when manually creating a session instead of using `with`
    # session.close()


def main():
    create_db_and_tables()
    create_heroes()

# purpose of __name__ == "__main__"
# is to have some code that is executed when called with `python app.py`
# but no called when another file imports it like `from app import something`
if __name__ == "__main__":
    main()
